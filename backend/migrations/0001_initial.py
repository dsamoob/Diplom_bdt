# Generated by Django 4.1.7 on 2023-04-03 10:05

import backend.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.CharField(choices=[('shpr', 'Магазин'), ('cnee', 'Покупатель')], default='cnee', max_length=5, verbose_name='Тип пользователя')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone', models.CharField(max_length=16, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', backend.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Город')),
            ],
        ),
        migrations.CreateModel(
            name='CompanyDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Название компании')),
                ('street', models.CharField(max_length=150, verbose_name='Улица')),
                ('bld', models.CharField(max_length=30, verbose_name='Строение')),
                ('bank_details', models.CharField(max_length=200, verbose_name='Банковские детали')),
                ('city_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shipment_status', models.CharField(choices=[('Confirmed', 'Принято'), ('Shipped', 'Отправлено')], default='Confirmed', max_length=20)),
                ('shipment_date', models.DateTimeField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('english_name', models.CharField(max_length=100, verbose_name='Местное название')),
                ('scientific_name', models.CharField(max_length=100, verbose_name='Научное название')),
                ('russian_name', models.CharField(max_length=100, verbose_name='Русское название')),
                ('size', models.CharField(default='All size', max_length=15, verbose_name='Размер')),
                ('company_details_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.companydetails')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_quantity', models.DecimalField(blank=True, decimal_places=0, default=0, max_digits=8, verbose_name='Кол-во заказанных шт.')),
                ('total_amoun', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, verbose_name='Сумма заказа')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Дата заказа')),
                ('box_quantity', models.DecimalField(blank=True, decimal_places=0, default=0, max_digits=2, verbose_name='Кол-во заказанных коробок')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Страна')),
            ],
        ),
        migrations.CreateModel(
            name='StockList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orders_till_date', models.DateTimeField(verbose_name='Дата окончания приема зказаов')),
                ('shipment_date', models.DateTimeField(verbose_name='Дата поставки')),
                ('bags_quantity', models.IntegerField(default=4, verbose_name='Кол-во пакетов в коробке')),
                ('currency_rate', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Курс доллара')),
                ('status', models.BooleanField(default=True)),
                ('box_weight', models.DecimalField(decimal_places=2, max_digits=4, verbose_name='Вес одной коробки')),
                ('company_details_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StockType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('freshwater', 'Пресноводные'), ('marine', 'морские'), ('plants', 'растения')], default='freshwater', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='StockListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='Цена')),
                ('quantity_bag', models.IntegerField(verbose_name='Кол-во в пакете')),
                ('ordered', models.IntegerField(verbose_name='Заказано')),
                ('limit', models.IntegerField(verbose_name='Кол-во в наличии')),
                ('english_name', models.CharField(blank=True, default=None, max_length=100, verbose_name='Местное название')),
                ('scientific_name', models.CharField(blank=True, default=None, max_length=100, verbose_name='Научное название')),
                ('russian_name', models.CharField(blank=True, default=None, max_length=100, verbose_name='Русское название')),
                ('size', models.CharField(blank=True, default=None, max_length=15, verbose_name='Размер')),
                ('item_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.item')),
                ('stock_list_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.stocklist')),
            ],
        ),
        migrations.AddField(
            model_name='stocklist',
            name='stock_type_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.stocktype'),
        ),
        migrations.CreateModel(
            name='ShipTo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(max_length=150, verbose_name='Улица')),
                ('bld', models.CharField(max_length=50, verbose_name='Строение')),
                ('contact_person', models.CharField(max_length=150, verbose_name='Контактное лицо')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон контактного лица')),
                ('city_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
                ('company_details_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.companydetails')),
            ],
        ),
        migrations.CreateModel(
            name='OrderDelivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.delivery')),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.order')),
            ],
        ),
        migrations.CreateModel(
            name='FreightRates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('POL', models.CharField(choices=[('SVO', 'ШРМ'), ('DME', 'ДМД'), ('VKO', 'ВНК')], max_length=5, verbose_name='Аэропорт отправления')),
                ('minimal_weight', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Минимальный вес')),
                ('price', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Цена за 1 кг')),
                ('city_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.city')),
            ],
        ),
        migrations.AddField(
            model_name='delivery',
            name='ship_to_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.shipto'),
        ),
        migrations.CreateModel(
            name='ConfirmEmailToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='When was this token generated')),
                ('key', models.CharField(db_index=True, max_length=64, unique=True, verbose_name='Key')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confirm_email_tokens', to=settings.AUTH_USER_MODEL, verbose_name='The User which is associated to this password reset token')),
            ],
            options={
                'verbose_name': 'Токен подтверждения Email',
                'verbose_name_plural': 'Токены подтверждения Email',
            },
        ),
        migrations.AddField(
            model_name='city',
            name='state_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.state'),
        ),
    ]
